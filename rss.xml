<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>te9yie</title>
        <link>https://te9yie.github.io</link>
        <description>te9yie.github.io</description>
        <lastBuildDate>Tue, 07 Jun 2022 19:10:43 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Godot で図形を描画する]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%E5%9B%B3%E5%BD%A2%E3%82%92%E6%8F%8F%E7%94%BB%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%E5%9B%B3%E5%BD%A2%E3%82%92%E6%8F%8F%E7%94%BB%E3%81%99%E3%82%8B</guid>
            <pubDate>Mon, 06 Jun 2022 08:24:01 GMT</pubDate>
            <description><![CDATA[Godot で図形を描画する]]></description>
            <content:encoded><![CDATA[<p><a href="/Godot">Godot</a> で矩形や球を描画したいと思った。メッシュを作ったりして色々面倒なのかなと思ったら <code>CanvasItem</code> に <code>draw_*</code> 系のメソッドがあった。</p>
<p><a href="https://docs.godotengine.org/ja/stable/tutorials/2d/custom_drawing_in_2d.html">https://docs.godotengine.org/ja/stable/tutorials/2d/custom_drawing_in_2d.html</a>
<a href="https://docs.godotengine.org/ja/stable/classes/class_canvasitem.html">https://docs.godotengine.org/ja/stable/classes/class_canvasitem.html</a></p>
<p>とりあえず <code>Node2D</code> を継承して描いてみる。</p>
<pre><code>extends Node2D

func _draw():
    draw_rect(Rect2(0, 0, 20, 20), Color.red)
</code></pre>
<p>これで左上に赤い四角が描ける。</p>
<h2>文字列の描画</h2>
<p>フォントを設定しての文字列描画もできる。</p>
<pre><code>extends Node2D

const font_data: DynamicFontData = preload("res://xxxx.ttf")

var font: DynamicFont = DynamicFont.new()

func _ready() -> void:
	font.font_data = font_data
	font.size = 26
	font.outline_size = 1
	font.outline_color = Color.white

func _draw() -> void:
	draw_string(font, Vector2(0, 0), "Hello, World!", Color.black)
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Godot でグローバルな定数や関数を定義する]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%AA%E5%AE%9A%E6%95%B0%E3%82%84%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%AA%E5%AE%9A%E6%95%B0%E3%82%84%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B</guid>
            <pubDate>Sun, 05 Jun 2022 23:48:04 GMT</pubDate>
            <description><![CDATA[Godot でグローバルな定数や関数を定義する]]></description>
            <content:encoded><![CDATA[<p>#<a href="/Godot">Godot</a></p>
<p><code>const</code> や <code>static</code> を使えばできた。</p>
<pre><code># global.gd
const block_size: int = 10

static func draw_block(x: int, y:int) -> void:
    ...
</code></pre>
<p>使う側では <code>preload</code> を使って読み込む。</p>
<pre><code># game.gd
const Global = preload("res://global.gd")

func _process(delta: float) -> void:
    Global.draw_block(2 * Global.block_size, 3 * Global.block_size)
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Godot で Y 座標基準で Z ソートする]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%20Y%20%E5%BA%A7%E6%A8%99%E5%9F%BA%E6%BA%96%E3%81%A7%20Z%20%E3%82%BD%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%20Y%20%E5%BA%A7%E6%A8%99%E5%9F%BA%E6%BA%96%E3%81%A7%20Z%20%E3%82%BD%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B</guid>
            <pubDate>Sun, 05 Jun 2022 21:58:10 GMT</pubDate>
            <description><![CDATA[Godot で Y 座標基準で Z ソートする]]></description>
            <content:encoded><![CDATA[<p>#<a href="/Godot">Godot</a></p>
<p><code>YSort</code> ノードを使う。</p>
<p><a href="https://docs.godotengine.org/ja/stable/classes/class_ysort.html">https://docs.godotengine.org/ja/stable/classes/class_ysort.html</a></p>
<p>このノードの子供にしたノードは Y 座標基準でソートされる。<a href="/タイルマップ">タイルマップ</a>も対応している。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2022-06-05]]></title>
            <link>https://te9yie.github.io/2022-06-05</link>
            <guid>https://te9yie.github.io/2022-06-05</guid>
            <pubDate>Sun, 05 Jun 2022 21:58:10 GMT</pubDate>
            <description><![CDATA[2022-06-05]]></description>
            <content:encoded><![CDATA[<p><a href="/Godot">Godot</a> でグリッドで移動するものを作っている。伝統的な<a href="/ローグライク">ローグライク</a>のようなやつ――最近ローグライクって言葉が何を指し示しているのかがよく分からない。</p>
<p><a href="/コリジョン判定">コリジョン判定</a>や<a href="/経路探索">経路探索</a>などが楽かなと思ってグリッドベースにしてみたんだけど、タイルにコリジョン設定して<a href="/物理エンジン">物理エンジン</a>で判定するみたいな機能が標準っぽくて、こういう<a href="/ゲームエンジン">ゲームエンジン</a>を使うと逆に大変なのかもしれない。逆に大変というか、どうやるのか調べたり用意されていないことをしようとするのに時間がかかる。単に通れる通れないの 2 値の 2 次元配列があって参照できるだけでいいんだけどな。</p>
<p>スプライトの前後関係もテクスチャの下基準で Z ソートしたいんだけどタイルマップと普通のスプライトが関係したときにどうするのかとか、何をどう設定すればいいのかが分からない。<a href="/アルゴリズム">アルゴリズム</a>は分かるし作れるのにゲームエンジンの使い方は分からないので、じれったい。自分で作ったほうが早い、みたいな気持ちになる――トータルで見たら絶対早くはないのに。</p>
<p>見つけた。<code>YSort</code> ノードというものを使うみたい。</p>
<p><a href="/Godot で Y 座標基準で Z ソートする">Godot で Y 座標基準で Z ソートする</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Godot でピクセルパーフェクトにする]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%E3%83%94%E3%82%AF%E3%82%BB%E3%83%AB%E3%83%91%E3%83%BC%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%E3%83%94%E3%82%AF%E3%82%BB%E3%83%AB%E3%83%91%E3%83%BC%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%81%99%E3%82%8B</guid>
            <pubDate>Sat, 04 Jun 2022 09:19:36 GMT</pubDate>
            <description><![CDATA[Godot でピクセルパーフェクトにする]]></description>
            <content:encoded><![CDATA[<p><a href="/Godot">Godot</a> に画像をインポートして表示したらリニア補間されたような表示になっていて<a href="/ドット絵">ドット絵</a>がボケボケになっていた。</p>
<h2>画像のインポート設定</h2>
<ol>
<li>インポートした画像を選択して「インポート」タブを開く</li>
<li>「プリセット」をクリックして「2D Pixel」を選ぶ</li>
<li>「再インポート」をクリックする</li>
</ol>
<p><a href="https://docs.godotengine.org/ja/stable/tutorials/assets_pipeline/importing_images.html">https://docs.godotengine.org/ja/stable/tutorials/assets_pipeline/importing_images.html</a></p>
]]></content:encoded>
        </item>
    </channel>
</rss>