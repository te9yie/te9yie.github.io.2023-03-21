<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>te9yie</title>
        <link>https://te9yie.github.io</link>
        <description>te9yie.github.io</description>
        <lastBuildDate>Mon, 13 Jun 2022 19:09:46 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[2022-06-10]]></title>
            <link>https://te9yie.github.io/2022-06-10</link>
            <guid>https://te9yie.github.io/2022-06-10</guid>
            <pubDate>Sat, 11 Jun 2022 12:19:36 GMT</pubDate>
            <description><![CDATA[2022-06-10]]></description>
            <content:encoded><![CDATA[<p><a href="/Godot">Godot</a> でブロックみたいなものを表示したいと思った。<a href="/ドット絵">ドット絵</a>で描くか <a href="/3D">3D</a> で<a href="/モデリング">モデリング</a>してもってくるかどうしよう、どうせなら 3D で作ってみようかと思って <a href="/Blender">Blender</a> を調べていたら、いつのまにかいろいろと進化していてびっくりした。</p>
<p>Geometry Nodes っていう<a href="/プロシージャルモデリング">プロシージャルモデリング</a>ができるような仕組みが気になった。</p>
<p><a href="/シェーダー">シェーダー</a>とかもそうだけど、ノードを使って<a href="/プロシージャル">プロシージャル</a>にものをつくるものが流行っているんだなあ。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2022-06-09]]></title>
            <link>https://te9yie.github.io/2022-06-09</link>
            <guid>https://te9yie.github.io/2022-06-09</guid>
            <pubDate>Thu, 09 Jun 2022 08:54:17 GMT</pubDate>
            <description><![CDATA[2022-06-09]]></description>
            <content:encoded><![CDATA[<p><a href="/Godot">Godot</a> の練習をしている。スクリプトとノードの使い分けに悩む。</p>
<p><a href="/Godot で図形を描画する">Godot で図形を描画する</a>ことができるので、シンプルなテトリスくらいなら全部スクリプトで作れてしまう。多分 Godot のお作法的にはノードを組み合わせて（T とか L 字型の）ブロックやフィールドを作るのが正解なんだと思う。でもそういうノードをつくってスクリプトで<a href="/当たり判定">当たり判定</a>や移動を制御してノードと連動させるのが結構面倒くさい。これが<a href="/物理演算">物理演算</a>で動くブロックで当たると砕けるとか見た目を基準として挙動をつくっていくものであれば、作りやすい気はする。</p>
<p>こういうエンジンを使ってつくる練習用の題材として<a href="/パズル">パズル</a>ゲームは向いていないのかもしれない。<a href="/2D シューティング">2D シューティング</a>ゲームのような見た目とコリジョンがあって当たったら反応するようなものの方が向いている気がする。</p>
<hr>
<p>操作中のブロックやフィールドとか色々考えていたけど、10x20 にブロックを敷き詰めたノードを作っておいてスクリプトからは位置と色を指定できるようにすればシンプルに実装できるかもしれない。―― 1 ドット単位で落下してくるとかにしたければ、これの手法では無理だけど。</p>
<p><a href="/プログラミング">プログラミング</a>がしたくてスクリプトから書こうとしてしまうんだけど、まず見た目を考えてノードの設計をしてから作っていく方が良いのかもしれない。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Godot で図形を描画する]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%E5%9B%B3%E5%BD%A2%E3%82%92%E6%8F%8F%E7%94%BB%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%E5%9B%B3%E5%BD%A2%E3%82%92%E6%8F%8F%E7%94%BB%E3%81%99%E3%82%8B</guid>
            <pubDate>Mon, 06 Jun 2022 08:24:01 GMT</pubDate>
            <description><![CDATA[Godot で図形を描画する]]></description>
            <content:encoded><![CDATA[<p><a href="/Godot">Godot</a> で矩形や球を描画したいと思った。メッシュを作ったりして色々面倒なのかなと思ったら <code>CanvasItem</code> に <code>draw_*</code> 系のメソッドがあった。</p>
<p><a href="https://docs.godotengine.org/ja/stable/tutorials/2d/custom_drawing_in_2d.html">https://docs.godotengine.org/ja/stable/tutorials/2d/custom_drawing_in_2d.html</a>
<a href="https://docs.godotengine.org/ja/stable/classes/class_canvasitem.html">https://docs.godotengine.org/ja/stable/classes/class_canvasitem.html</a></p>
<p>とりあえず <code>Node2D</code> を継承して描いてみる。</p>
<pre><code>extends Node2D

func _draw():
    draw_rect(Rect2(0, 0, 20, 20), Color.red)
</code></pre>
<p>これで左上に赤い四角が描ける。</p>
<h2>文字列の描画</h2>
<p>フォントを設定しての文字列描画もできる。</p>
<pre><code>extends Node2D

const font_data: DynamicFontData = preload("res://xxxx.ttf")

var font: DynamicFont = DynamicFont.new()

func _ready() -> void:
	font.font_data = font_data
	font.size = 26
	font.outline_size = 1
	font.outline_color = Color.white

func _draw() -> void:
	draw_string(font, Vector2(0, 0), "Hello, World!", Color.black)
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Godot でグローバルな定数や関数を定義する]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%AA%E5%AE%9A%E6%95%B0%E3%82%84%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%AA%E5%AE%9A%E6%95%B0%E3%82%84%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B</guid>
            <pubDate>Sun, 05 Jun 2022 23:48:04 GMT</pubDate>
            <description><![CDATA[Godot でグローバルな定数や関数を定義する]]></description>
            <content:encoded><![CDATA[<p>#<a href="/Godot">Godot</a></p>
<p><code>const</code> や <code>static</code> を使えばできた。</p>
<pre><code># global.gd
const block_size: int = 10

static func draw_block(x: int, y:int) -> void:
    ...
</code></pre>
<p>使う側では <code>preload</code> を使って読み込む。</p>
<pre><code># game.gd
const Global = preload("res://global.gd")

func _process(delta: float) -> void:
    Global.draw_block(2 * Global.block_size, 3 * Global.block_size)
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Godot で Y 座標基準で Z ソートする]]></title>
            <link>https://te9yie.github.io/Godot%20%E3%81%A7%20Y%20%E5%BA%A7%E6%A8%99%E5%9F%BA%E6%BA%96%E3%81%A7%20Z%20%E3%82%BD%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B</link>
            <guid>https://te9yie.github.io/Godot%20%E3%81%A7%20Y%20%E5%BA%A7%E6%A8%99%E5%9F%BA%E6%BA%96%E3%81%A7%20Z%20%E3%82%BD%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B</guid>
            <pubDate>Sun, 05 Jun 2022 21:58:10 GMT</pubDate>
            <description><![CDATA[Godot で Y 座標基準で Z ソートする]]></description>
            <content:encoded><![CDATA[<p>#<a href="/Godot">Godot</a></p>
<p><code>YSort</code> ノードを使う。</p>
<p><a href="https://docs.godotengine.org/ja/stable/classes/class_ysort.html">https://docs.godotengine.org/ja/stable/classes/class_ysort.html</a></p>
<p>このノードの子供にしたノードは Y 座標基準でソートされる。<a href="/タイルマップ">タイルマップ</a>も対応している。</p>
]]></content:encoded>
        </item>
    </channel>
</rss>