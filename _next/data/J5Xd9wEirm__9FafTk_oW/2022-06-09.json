{"pageProps":{"postData":{"id":"2022-06-09","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      hr: \"hr\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/Godot\",\n          children: \"Godot\"\n        }), \" の練習をしている。スクリプトとノードの使い分けに悩む。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/Godot で図形を描画する\",\n          children: \"Godot で図形を描画する\"\n        }), \"ことができるので、シンプルなテトリスくらいなら全部スクリプトで作れてしまう。多分 Godot のお作法的にはノードを組み合わせて（T とか L 字型の）ブロックやフィールドを作るのが正解なんだと思う。でもそういうノードをつくってスクリプトで\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/当たり判定\",\n          children: \"当たり判定\"\n        }), \"や移動を制御してノードと連動させるのが結構面倒くさい。これが\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/物理演算\",\n          children: \"物理演算\"\n        }), \"で動くブロックで当たると砕けるとか見た目を基準として挙動をつくっていくものであれば、作りやすい気はする。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"こういうエンジンを使ってつくる練習用の題材として\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/パズル\",\n          children: \"パズル\"\n        }), \"ゲームは向いていないのかもしれない。\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/2D シューティング\",\n          children: \"2D シューティング\"\n        }), \"ゲームのような見た目とコリジョンがあって当たったら反応するようなものの方が向いている気がする。\"]\n      }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n        children: \"操作中のブロックやフィールドとか色々考えていたけど、10x20 にブロックを敷き詰めたノードを作っておいてスクリプトからは位置と色を指定できるようにすればシンプルに実装できるかもしれない。―― 1 ドット単位で落下してくるとかにしたければ、これの手法では無理だけど。\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/プログラミング\",\n          children: \"プログラミング\"\n        }), \"がしたくてスクリプトから書こうとしてしまうんだけど、まず見た目を考えてノードの設計をしてから作っていく方が良いのかもしれない。\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"create_at":"2022-06-09 08:54:17","update_at":"2022-06-09 08:54:17","refLinks":[],"links":["2022-06-01","2022-06-05","2022-06-10","Godot で UI をつくる","Godot で Y 座標基準で Z ソートする","Godot でグローバルな定数や関数を定義する","Godot でピクセルパーフェクトにする"]}},"__N_SSG":true}