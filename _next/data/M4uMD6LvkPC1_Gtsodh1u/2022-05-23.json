{"pageProps":{"postData":{"id":"2022-05-23","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      code: \"code\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"このサイトがいつ頃更新されたか、更新頻度はどんな感じか分かるといいなあと思った。そういえば \", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"GitHub\",\n          children: \"GitHub\"\n        }), \" で草が生える仕組みがそれっぽい。サイトの更新情報から GitHub の草画像のようなものを生成する、そんなものを作ってみたい。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"記事の履歴で取るか、\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"Git\",\n          children: \"Git\"\n        }), \" の履歴で取るか、記事の履歴で取るなら最新だけとるのか、色々仕様は考えられる。まずは一番簡単そうな Git の履歴で取ってみるか…\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"画像の生成は \", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"Node.js\",\n          children: \"Node.js\"\n        }), \" でやりたい。リンク情報つくったりも Node.js でやっているし。Canvas に描いた画像を出力する、みたいなことができればよいと思う。そんなことできるのかは知らんけど。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Node.js で画像出力を調べているときに \", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"Deno\",\n          children: \"Deno\"\n        }), \" というものを見つけた。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://deno.land/\",\n          children: \"https://deno.land/\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Node.js の進化版みたいな感じっぽい。URL で import できるあたりがすてき。\", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" とかが必要なくなって \", _jsx(_components.code, {\n          children: \"deno run <file>\"\n        }), \" で実行できてちょっとしたことならこれでいいんじゃないか感。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Deno で Canvas に描いた絵を画像として出力するのはこんな感じでできる。\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript:create-image.js\",\n          children: \"import { createCanvas } from \\\"https://deno.land/x/canvas/mod.ts\\\";\\n\\nconst canvas = createCanvas(200, 200);\\nconst ctx = canvas.getContext(\\\"2d\\\");\\n\\nctx.fillStyle = \\\"red\\\";\\nctx.fillRect(50, 50, 200 - 100, 200 - 100);\\n\\nawait Deno.writeFile(\\\"image.png\\\", canvas.toBuffer());\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"そして実行はこれだけ\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"$ deno run --allow-write create-image.js\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"create_at":"2022-05-23 21:05:21","update_at":"2022-05-23 21:05:21","refLinks":[],"links":["Git でファイルの作成日を取得する","Git でファイルの更新日時を取得する","GitHub Actions の checkout アクション","記事のメタ情報を収集する"]}},"__N_SSG":true}