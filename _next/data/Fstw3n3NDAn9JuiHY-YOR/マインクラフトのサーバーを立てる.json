{"pageProps":{"postData":{"id":"マインクラフトのサーバーを立てる","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      code: \"code\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/マインクラフト\",\n          children: \"マインクラフト\"\n        }), \"には \", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/Java\",\n          children: \"Java\"\n        }), \" 版と統合版があって、Java 版は PC 向けで \", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/MOD\",\n          children: \"MOD\"\n        }), \" を入れたりできて拡張性が高い。統合版はコンシューマ機向けで拡張性はないけどクロスプラットフォーム、みたいなイメージだった。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"サーバーを立てられるのは Java 版だけだと思っていたら、公式で統合版のサーバーが落とせるようになっていた。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://www.minecraft.net/ja-jp/download/server/bedrock\",\n          children: \"https://www.minecraft.net/ja-jp/download/server/bedrock\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"zip 内の \", _jsx(_components.code, {\n          children: \"bedrock_server_how_to.html\"\n        }), \" に詳しいことは書いてある。\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/Windows\",\n          children: \"Windows\"\n        }), \" でサーバーを立ち上げて統合版を起動して localhost で接続してみようとしたら繋がらなかったが、その解決方法も書いてあった。ループバックが制限されているようだ。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"CheckNetIsolation.exe LoopbackExempt -a -p=S-1-15-2-1958404141-86561845-1752920682-3514627264-368642714-62675701-733520436\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Switch から接続する\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/Switch\",\n          children: \"Switch\"\n        }), \" のマインクラフトからサーバーに接続しようと思ったら、サーバーの追加ができなかった。色々調べてみると Switch 本体の \", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/DNS\",\n          children: \"DNS\"\n        }), \" を \", _jsx(_components.code, {\n          children: \"104.238.130.180\"\n        }), \" と \", _jsx(_components.code, {\n          children: \"8.8.8.8\"\n        }), \" にする方法が見つかった。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"公式サーバーを偽って誰かが作ってくれたサーバーにすげ替えてるんだろうけど、セキュリティ的に怖い手法だな。ちゃんとやるなら自前で DNS サーバー立てた方がよさそう。\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"create_at":"2022-06-18 23:59:38","update_at":"2022-06-18 23:59:38","refLinks":["マインクラフトにアドオンを入れる"],"links":["2022-05-29","アドオン"]}},"__N_SSG":true}