{"pageProps":{"postData":{"id":"マインクラフトにアドオンを入れる","content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      code: \"code\",\n      h2: \"h2\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/Java\",\n          children: \"Java\"\n        }), \" 版\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/マインクラフト\",\n          children: \"マインクラフト\"\n        }), \"だけではなく統合版でも\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/アドオン\",\n          children: \"アドオン\"\n        }), \"という仕組みでゲームが拡張できるみたい。\", _jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/MOD\",\n          children: \"MOD\"\n        }), \" の呼び方違いなのかと思ったら仕組みが違うみたいで同じものではないらしい。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"ActualGuns 3D Add-on を入れてみる。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://pixelpoly.co/content/actualguns-3d\",\n          children: \"https://pixelpoly.co/content/actualguns-3d\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"ダウンロードして \", _jsx(_components.code, {\n          children: \"ActualGuns_3D.mcaddon\"\n        }), \" を実行するだけだった。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"サーバーに適用する\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          className: \"internal new\",\n          href: \"/マインクラフトのサーバーを立てる\",\n          children: \"マインクラフトのサーバーを立てる\"\n        }), \"ことができたので、サーバーにもアドオンを適用したい。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"mcaddon\"\n        }), \" ファイルは実質 zip ファイルなので展開する。ActualGuns の場合 Behavior Pack と Resource Pack が含まれていた。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"- ActualGuns_3D.mcaddon\\n  +- ActualGuns [BP]\\n  +- ActualGuns [RP]\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"それぞれをサーバーの \", _jsx(_components.code, {\n          children: \"behavior_packs\"\n        }), \" フォルダと \", _jsx(_components.code, {\n          children: \"resource_packs\"\n        }), \" フォルダに置いた。そして、適用するワールドの \", _jsx(_components.code, {\n          children: \"world_behavior_packs.json\"\n        }), \" と \", _jsx(_components.code, {\n          children: \"world_resource_packs.json\"\n        }), \" にアドオン情報を追記する。（事前にワールドは作っておく。ファイルが存在しない場合はファイルを作る）\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"例：\", _jsx(_components.code, {\n          children: \"world_behavior_packs.json\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-world_behavior_packs.json\",\n          children: \"[\\n  {\\n    \\\"pack_id\\\": \\\"227eb195-5c5c-405f-87fc-b11001aafd61\\\",\\n    \\\"version\\\": [1, 3, 3]\\n  }\\n]\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"pack_id\"\n        }), \", \", _jsx(_components.code, {\n          children: \"version\"\n        }), \" はそれぞれのアドオンのフォルダ内の \", _jsx(_components.code, {\n          children: \"manifest.json\"\n        }), \" の \", _jsx(_components.code, {\n          children: \"uuid\"\n        }), \", \", _jsx(_components.code, {\n          children: \"version\"\n        }), \" からコピーしてくる。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"例：\", _jsx(_components.code, {\n          children: \"ActualGuns [BP]/manifest.json\"\n        }), \" の上部\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-manifest.json\",\n          children: \"{\\n\\t\\\"format_version\\\": 2,\\n\\t\\\"header\\\": {\\n\\t\\t\\\"name\\\": \\\"pack.name\\\",\\n\\t\\t\\\"description\\\": \\\"pack.description\\\",\\n\\t\\t\\\"uuid\\\": \\\"227eb195-5c5c-405f-87fc-b11001aafd61\\\",\\n\\t\\t\\\"version\\\": [\\n\\t\\t\\t1,\\n\\t\\t\\t3,\\n\\t\\t\\t3\\n\\t\\t],\\n\\t\\t\\\"min_engine_version\\\": [\\n\\t\\t\\t1,\\n\\t\\t\\t17,\\n\\t\\t\\t30\\n\\t\\t],\\n\\t\\t\\\"pack_scope\\\": \\\"world\\\",\\n\\t\\t\\\"platform_locked\\\": false\\n\\t},\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"これでサーバーを起動すれば適用されるはずだが、ActualGuns の場合は \", _jsx(_components.code, {\n          children: \"Experimental Molang Features\"\n        }), \" と \", _jsx(_components.code, {\n          children: \"Holiday Creator Features\"\n        }), \" を有効にしないといけない。サーバーで Experimental 機能を有効にする方法が見つからなかった。\", _jsx(_components.code, {\n          children: \"server.properties\"\n        }), \" にも設定項目がない。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"server.properties\"\n        }), \" で設定できるようにしてくれ、という要望はずっとあるみたい。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://feedback.minecraft.net/hc/en-us/community/posts/360048142731-Experimental-MODE-FOR-Dedicated-servers-BEDROCK-\",\n          children: \"https://feedback.minecraft.net/hc/en-us/community/posts/360048142731-Experimental-MODE-FOR-Dedicated-servers-BEDROCK-\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"最終的には、一旦 ActualGuns アドオン有効にしたワールドをクライアントで作っておいて、そのワールドをサーバー側にコピーしてくる方法で対応できた。\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"クライアントのワールドは \", _jsx(_components.code, {\n          children: \"shell:local appdata\"\n        }), \" で \", _jsx(_components.code, {\n          children: \"minecraftWorlds\"\n        }), \" を検索して見つけた。自分の場合、\", _jsx(_components.code, {\n          children: \"<shell:local appdata>\\\\Packages\\\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\\\LocalState\\\\games\\\\com.mojang\\\\minecraftWorlds\\\\\"\n        }), \" にあった。ここによく分からない名前のフォルダがある。それがワールドのフォルダでその中の \", _jsx(_components.code, {\n          children: \"levelname.txt\"\n        }), \" を見ればワールド名が分かる。このワールドのフォルダを丸ごとサーバーの \", _jsx(_components.code, {\n          children: \"worlds\"\n        }), \" フォルダに分かりやすい名前にリネームして持ってくる。（\", _jsx(_components.code, {\n          children: \"world_behavior_packs.json\"\n        }), \" と \", _jsx(_components.code, {\n          children: \"world_resource_packs.json\"\n        }), \" も含まれているので、上記の追記なんかも必要ない）\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"あとは \", _jsx(_components.code, {\n          children: \"server.properties\"\n        }), \" の \", _jsx(_components.code, {\n          children: \"level-name\"\n        }), \" にフォルダ名を設定すればいけた。\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"create_at":"2022-06-19 01:00:35","update_at":"2022-06-19 01:00:35","refLinks":[],"links":["2022-05-29","Windows","Switch","DNS"]}},"__N_SSG":true}